import json
import os
import unittest

import pymongo


class jvmTests(unittest.TestCase):

    def test01(self):
        monitor_folder = os.path.join("result")
        print(monitor_folder)
        print(os.path.abspath(os.path.dirname(__file__)))


    def test02(self):
        codes = ["AMT_GUART_RELATED_REPAY_TOENT", "AMT_GUART_RELATED_REPAY_TOPERSON", "AMT_OTHER_RELATED_REPAY_TOENT",
                 "AMT_OTHER_RELATED_REPAY_TOPERSON", "AMT_OWE_FEE_TAPWATER", "AMT_OWE_FEE_TELECOM",
                 "AMT_RELATE_ADMINIST_PUNISHMENT", "AMT_RELATE_CIVILJUDGMENT", "AMT_RELATE_ENFORCEMENT",
                 "AMT_RELATE_OWE_TAX",
                 "AVG_CREDITLIMIT_INS", "AVG_MOB_BUSINESS_PL", "AVG_MOB_CC", "AVG_MOB_CONSUME_PL", "AVG_MOB_FARM_PL",
                 "AVG_MOB_HOUSE_PL", "AVG_MOB_NOMORT_PL", "AVG_MOB_NRL", "AVG_MOB_PL", "AVG_MOB_QC", "AVG_MOB_RC",
                 "AVG_MOB_RL",
                 "AVG_MOB_RLS", "AVG_MOB_TOTAL", "AVG_UESD_CREDITLIMIT_INS", "BAD_DEBT_AMT_CURR_BUSINESS_PL",
                 "BAD_DEBT_AMT_CURR_CC", "BAD_DEBT_AMT_CURR_CONSUME_PL", "BAD_DEBT_AMT_CURR_FARM_PL",
                 "BAD_DEBT_AMT_CURR_HOUSE_PL", "BAD_DEBT_AMT_CURR_NOMORT_PL", "BAD_DEBT_AMT_CURR_NRL",
                 "BAD_DEBT_AMT_CURR_PL",
                 "BAD_DEBT_AMT_CURR_QC", "BAD_DEBT_AMT_CURR_RC", "BAD_DEBT_AMT_CURR_RL", "BAD_DEBT_AMT_CURR_RLS",
                 "BAD_DEBT_AMT_CURR_TOTAL", "BALANCE_NOW_BUSINESS_PL", "BALANCE_NOW_CC", "BALANCE_NOW_CONSUME_PL",
                 "BALANCE_NOW_FARM_PL", "BALANCE_NOW_HOUSE_PL", "BALANCE_NOW_NOMORT_PL", "BALANCE_NOW_NRL",
                 "BALANCE_NOW_PL",
                 "BALANCE_NOW_QC", "BALANCE_NOW_RC", "BALANCE_NOW_RL", "BALANCE_NOW_RLS", "BALANCE_NOW_TOTAL",
                 "BAL_ASSET_BE_RECOVERED", "BAL_BE_RECOVERED", "BAL_GUART_RELATED_REPAY_TOENT",
                 "BAL_GUART_RELATED_REPAY_TOPERSON", "BAL_OTHER_RELATED_REPAY_TOENT",
                 "BAL_OTHER_RELATED_REPAY_TOPERSON",
                 "BAL_PAIDBACK_BE_RECOVERED", "BAL_SUMMARY_BAD_DEBT", "BAL_UN_SETTLE_COLLATERAL_BUSINESS_PL",
                 "BAL_UN_SETTLE_COLLATERAL_CONSUME_PL", "BAL_UN_SETTLE_COLLATERAL_FARM_PL",
                 "BAL_UN_SETTLE_COLLATERAL_NRL",
                 "BAL_UN_SETTLE_COLLATERAL_PL", "BAL_UN_SETTLE_COLLATERAL_RL", "BAL_UN_SETTLE_COLLATERAL_RLS",
                 "BAL_UN_SETTLE_COLLATERAL_TOTAL", "BAL_UN_SETTLE_COMBIN_BUSINESS_PL",
                 "BAL_UN_SETTLE_COMBIN_CONSUME_PL",
                 "BAL_UN_SETTLE_COMBIN_FARM_PL", "BAL_UN_SETTLE_COMBIN_NRL", "BAL_UN_SETTLE_COMBIN_PL",
                 "BAL_UN_SETTLE_COMBIN_RL", "BAL_UN_SETTLE_COMBIN_RLS", "BAL_UN_SETTLE_COMBIN_TOTAL",
                 "BAL_UN_SETTLE_CREDIT_BUSINESS_PL", "BAL_UN_SETTLE_CREDIT_CONSUME_PL", "BAL_UN_SETTLE_CREDIT_FARM_PL",
                 "BAL_UN_SETTLE_CREDIT_NRL", "BAL_UN_SETTLE_CREDIT_PL", "BAL_UN_SETTLE_CREDIT_RL",
                 "BAL_UN_SETTLE_CREDIT_RLS",
                 "BAL_UN_SETTLE_CREDIT_TOTAL", "DIF_QUERYORG_12_CA", "DIF_QUERYORG_12_CCA", "DIF_QUERYORG_12_PLA",
                 "DIF_QUERYORG_3_CA", "DIF_QUERYORG_3_CCA", "DIF_QUERYORG_3_PLA", "DIF_QUERYORG_6_CA",
                 "DIF_QUERYORG_6_CCA",
                 "DIF_QUERYORG_6_PLA", "DIF_QUERYORG_9_CA", "DIF_QUERYORG_9_CCA", "DIF_QUERYORG_9_PLA",
                 "DIF_QUERY_12_CA",
                 "DIF_QUERY_12_CCA", "DIF_QUERY_12_PLA", "DIF_QUERY_3_CA", "DIF_QUERY_3_CCA"]

        print(len(codes))

    def test03(self):
        path = os.path.join(os.path.abspath(os.path.dirname(__file__)), "reportcode/result.csv")

        with open(path, mode='r', encoding="UTF-8") as f:
            context = f.readlines()
            f.close()
        print(context)
        for strss in context:
            print(strss.split(",")[1].strip())

    def test04(self):
        myClient = pymongo.MongoClient(host="192.168.66.172", port=28017)
        myDB = myClient.admin
        myDB.authenticate("root", "D1w119hsJry0")
        myTables = myClient.credit_report
        collection = myTables.target_field
        print(collection.storageSize())

    def test05(self, reportCodeList):
        fieldsPath = os.path.join(os.path.abspath(os.path.dirname(__file__)), "responseJson/fields.json")
        with open(fieldsPath, mode='r', encoding="UTF-8") as f:
            fieldsJson = json.load(f)
            f.close()
        listFields = fieldsJson["fields"]
        for reportCode in reportCodeList:
            reportCodePath = os.path.join(os.path.abspath(os.path.dirname(__file__)), "responseJson/" + reportCode + ".json")
            with open(reportCodePath, mode='r', encoding="UTF-8") as f:
                reportCodeJsonList = json.load(f)
                f.close()
            resultDict = {}
            for reportCodeJson in reportCodeJsonList:
                resultDict[reportCodeJson["key"]] = resultDict["val"]

    def test06(self, reportCode="37649401277893345278"):
        reportCodePath = os.path.join(os.path.abspath(os.path.dirname(__file__)), "responseJson/" + "37649401277893345278" + ".json")
        with open(reportCodePath, mode='r', encoding="UTF-8") as f:
            reportCodeJsonList = json.load(f)
            f.close()
        resultDict = {}
        resultDict["reportCode"] = "37649401277893345278"
        for reportCodeJson in reportCodeJsonList:
            resultDict[reportCodeJson["key"]] = reportCodeJson["val"]
        print(resultDict)

    def test07(self, resultDict):
        fieldsPath = os.path.join(os.path.abspath(os.path.dirname(__file__)), "responseJson/fields.json")
        with open(fieldsPath, mode='r', encoding="UTF-8") as f:
            fieldsJson = json.load(f)
            f.close()
        for key in fieldsJson:
            if fieldsJson[key] == resultDict[key]:
                del resultDict[key]
            else:
                print("{}数据指标 {}:{} 存在差异".format(resultDict["reportCode"], key, fieldsJson[key]))
            print("{}剩余数据:{}".format(resultDict["reportCode"], resultDict))


    def test08(self):
        dict1 = {"a": "a"}
        dict2 = {"a": "b"}
        if dict1 != dict2:
            print("!=")

    def test09(self):
        reportCodePath = os.path.join(os.path.abspath(os.path.dirname(__file__)), "responseJsonCodes/" + "78062953932464461535" + ".json")
        with open(reportCodePath, mode='r', encoding="UTF-8") as f:
            reportCodeJsonList = json.load(f)
            f.close()
        resultDict = {}
        for reportCodeJson in reportCodeJsonList:
            resultDict[reportCodeJson["key"]] = reportCodeJson["val"]
        print(resultDict)


    def test10(self):
        errList = ['15067074427857069460', '15067074427857069460', '12723860423744345351', '12723860423744345351', '27703806853024070983', '27703806853024070983', '94241378841144407143', '94241378841144407143', '38594508539243515166', '38594508539243515166', '39131622465221909572', '39131622465221909572', '45023330728556000687', '45023330728556000687', '75320327705490820561', '75320327705490820561', '75724551821919680241', '75724551821919680241', '96596780824053352697', '96596780824053352697', '00129700139666780139', '00129700139666780139', '12400120703762421947', '12400120703762421947', '20880766910173897734', '20880766910173897734', '59135998979000462964', '59135998979000462964', '82974470185402973797', '82974470185402973797', '55715127217188745334', '55715127217188745334', '68329825832657324395', '68329825832657324395', '24870277053894417232', '24870277053894417232', '17816257650846430478', '17816257650846430478', '22966543671531703984', '22966543671531703984', '41922317862868218707', '41922317862868218707', '01477866773564657770', '01477866773564657770', '76937481729938463101', '76937481729938463101', '33087041158316058802', '33087041158316058802', '55095668925494781484', '55095668925494781484', '34865659651946480572', '34865659651946480572', '95106244105413228749', '95106244105413228749', '36012467985337065989', '36012467985337065989', '20255016393817279490', '20255016393817279490', '13246714743617354697', '13246714743617354697', '13552228513044230739', '13552228513044230739', '50689241488072211245', '50689241488072211245', '70278284842908152664', '70278284842908152664', '00739839654298258134', '00739839654298258134', '86399953355853865072', '86399953355853865072', '22239668624451466083', '22239668624451466083', '68530915022953698092', '68530915022953698092', '17541807009614155143', '17541807009614155143', '84387441554001007333', '84387441554001007333', '76615876854358890112', '76615876854358890112', '20496539975038988308', '20496539975038988308', '45736615196392645459', '45736615196392645459', '46966181708085260815', '46966181708085260815', '19918848258058548305', '19918848258058548305', '96220507251747471804', '96220507251747471804', '47271849984152686500', '47271849984152686500', '02986269983310696405', '02986269983310696405', '14313073276088408863', '14313073276088408863', '84687105959972724773', '84687105959972724773', '96533987983404302093', '96533987983404302093', '11706399310438772898', '11706399310438772898', '85845643305894471087', '85845643305894471087', '59270228680552590767', '59270228680552590767', '83906671296443287059', '83906671296443287059', '15575703336204032696', '15575703336204032696', '00186448371240881102', '00186448371240881102', '46187906756232353740', '46187906756232353740', '51356357402707636831', '51356357402707636831', '76164176878154844820', '76164176878154844820', '91517650678150745266', '91517650678150745266', '90698719083029807388', '90698719083029807388', '75549317516128197087', '75549317516128197087', '84208665907493933092', '84208665907493933092', '87387613435898159036', '87387613435898159036', '62236720630110715799', '62236720630110715799', '40340422831194476093', '40340422831194476093', '35128854639870708043', '35128854639870708043', '47873556244381583156', '47873556244381583156', '00804120017223507364', '00804120017223507364', '48469927688106137805', '48469927688106137805', '95558421756039197835', '95558421756039197835', '49711413033885093752', '49711413033885093752', '24682655502029391944', '24682655502029391944', '25672715176070355324', '25672715176070355324', '83941433491536681211', '83941433491536681211', '10862355968610976996', '10862355968610976996', '86954345787014625833', '86954345787014625833', '54740961084656939418', '54740961084656939418', '34244063075387872853', '34244063075387872853', '62662220428619438763', '62662220428619438763', '31240438153210019836', '31240438153210019836', '08075538301337435246', '08075538301337435246', '04820998161349605861', '04820998161349605861', '49188632100850144553', '49188632100850144553', '60450388509517010555', '60450388509517010555', '45945007821203401144', '45945007821203401144', '52870105888422334126', '52870105888422334126', '80487941010102057095', '80487941010102057095', '10799148358886286528', '10799148358886286528', '65330744063329339183', '65330744063329339183', '65189958401561391502', '65189958401561391502', '64516357624906035489', '64516357624906035489', '53423584598046080538', '53423584598046080538', '29732503650086892151', '29732503650086892151', '33944188559428855049', '33944188559428855049', '87211404511659233994', '87211404511659233994', '51466937475373785584', '51466937475373785584', '89159957330753195796', '89159957330753195796', '53981020930952901513', '53981020930952901513', '74641447276065327070', '74641447276065327070', '46645741140802398470', '46645741140802398470', '61320363010219509791', '61320363010219509791', '32574977795987816609', '32574977795987816609']
        resultList = []
        for i in errList:
            if i not in resultList:
                resultList.append(i)
        print(len(resultList))
        print(resultList)